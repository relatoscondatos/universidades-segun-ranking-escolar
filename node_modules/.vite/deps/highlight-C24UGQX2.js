import {
  highlightCode,
  tagHighlighter,
  tags
} from "./chunk-JDGBGSL6.js";
import "./chunk-PZ5AY32C.js";

// node_modules/@observablehq/notebook-kit/dist/src/runtime/stdlib/highlight.js
var highlighter = tagHighlighter([
  { tag: tags.link, class: "tok-link" },
  { tag: [tags.heading, tags.strong], class: "tok-strong" },
  { tag: tags.emphasis, class: "tok-emphasis" },
  { tag: [tags.keyword, tags.typeName], class: "tok-keyword" },
  { tag: tags.atom, class: "tok-atom" },
  { tag: [tags.bool, tags.escape, tags.number], class: "tok-literal" },
  { tag: [tags.string, tags.regexp], class: "tok-string" },
  { tag: tags.comment, class: "tok-comment" },
  { tag: tags.invalid, class: "tok-invalid" },
  { tag: tags.variableName, class: "tok-variable" },
  { tag: [tags.definition(tags.variableName), tags.className, tags.propertyName], class: "tok-definition" },
  { tag: tags.meta, class: "tok-meta" }
]);
async function highlight(code) {
  const language = getLanguage(code);
  if (!language)
    return;
  const parent = code.parentElement;
  if (parent)
    parent.dataset.language = language;
  const parser = await getParser(language);
  if (!parser)
    return;
  const document = code.ownerDocument;
  const text = code.textContent;
  const tree = parser.parse(text);
  while (code.lastChild)
    code.lastChild.remove();
  function emit(text2, classes) {
    let node = document.createTextNode(text2);
    if (classes) {
      const span = document.createElement("span");
      span.appendChild(node);
      span.className = classes;
      node = span;
    }
    code.appendChild(node);
  }
  function emitBreak() {
    code.appendChild(document.createTextNode("\n"));
  }
  highlightCode(text, tree, highlighter, emit, emitBreak);
}
async function getParser(language) {
  switch (language) {
    case "node":
      language = "ts";
      break;
  }
  switch (language) {
    case "js":
    case "ts":
    case "jsx":
      return (await import("./dist-7LUAESH4.js")).parser.configure({ dialect: language });
    case "python":
      return (await import("./dist-HHWUTDE5.js")).parser;
    case "html":
      return (await import("./dist-GA6UYWHC.js")).parser;
    case "css":
      return (await import("./dist-MRVI7KTA.js")).parser;
    case "md":
      return (await import("./dist-YOGCWAVZ.js")).parser;
  }
}
function getLanguage(code) {
  const language = [...code.classList].find((c) => c.startsWith("language-"))?.slice("language-".length)?.toLowerCase();
  switch (language) {
    case "javascript":
      return "js";
    case "typescript":
      return "ts";
    case "py":
      return "python";
    case "markdown":
      return "md";
  }
  return language;
}
export {
  highlight,
  highlighter
};
//# sourceMappingURL=highlight-C24UGQX2.js.map

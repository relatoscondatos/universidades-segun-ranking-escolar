import type { ColumnSchema, QueryParam } from "../runtime/index.js";
import type { BigQueryConfig } from "./bigquery.js";
import type { DatabricksConfig } from "./databricks.js";
import type { DuckDBConfig } from "./duckdb.js";
import type { SQLiteConfig } from "./sqlite.js";
import type { SnowflakeConfig } from "./snowflake.js";
import type { PostgresConfig } from "./postgres.js";
export type DatabaseConfig = BigQueryConfig | DatabricksConfig | DuckDBConfig | SQLiteConfig | SnowflakeConfig | PostgresConfig;
export type QueryTemplateFunction = (strings: readonly string[], ...params: QueryParam[]) => Promise<SerializableQueryResult>;
export type SerializableQueryResult = {
    rows: Record<string, unknown>[];
    schema: ColumnSchema[];
    duration: number;
    date: Date;
};
export declare function getDatabaseConfig(sourcePath: string, databaseName: string): Promise<DatabaseConfig>;
export declare function getDatabase(config: DatabaseConfig): Promise<QueryTemplateFunction>;
export type Replacer = (this: {
    [key: string]: unknown;
}, key: string, value: unknown) => unknown;
export declare function getReplacer(config: DatabaseConfig): Promise<Replacer | undefined>;
export declare function getQueryCachePath(sourcePath: string, databaseName: string, strings: readonly string[], ...params: unknown[]): Promise<string>;

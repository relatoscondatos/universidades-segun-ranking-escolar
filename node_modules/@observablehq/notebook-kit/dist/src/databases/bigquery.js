import { BigQuery } from "@google-cloud/bigquery";
import { BigQueryDate, BigQueryDatetime, BigQueryTimestamp } from "@google-cloud/bigquery";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
export default function bigquery({ type, ...options }) {
    return async (strings, ...params) => {
        const bigquery = new BigQuery(options);
        const date = new Date();
        const [job] = await bigquery.createQueryJob({ query: strings.join("?"), params });
        const [rows, , response] = await job.getQueryResults();
        return { rows, schema: getTableSchema(response.schema), duration: Date.now() - +date, date };
    };
}
function getTableSchema({ fields }) {
    return fields.map(getColumnSchema);
}
function getColumnSchema(field) {
    return { name: field.name, type: getColumnType(field) };
}
function getColumnType({ type, mode }) {
    switch (mode) {
        case "REPEATED":
            return "array";
    }
    switch (type) {
        case "DATE":
        case "DATETIME":
        case "TIMESTAMP":
            return "date";
        case "BOOL":
        case "BOOLEAN":
            return "boolean";
        case "STRUCT":
        case "RECORD":
        case "GEOGRAPHY":
            return "object";
        case "BYTES":
            return "buffer";
        case "FLOAT":
        case "FLOAT64":
            return "number";
        case "INT64":
        case "INTEGER":
            return "number";
        case "NUMERIC":
            return "number";
        case "STRING":
        case "TIME":
        default:
            return "string";
    }
}
export function replacer(key, value) {
    const v = this[key];
    return v instanceof BigQueryDate ||
        v instanceof BigQueryDatetime ||
        v instanceof BigQueryTimestamp
        ? new Date(v.value).toJSON()
        : value;
}

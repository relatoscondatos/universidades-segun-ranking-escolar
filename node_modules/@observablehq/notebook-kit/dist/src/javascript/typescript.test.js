import { assert, expect, it } from "vitest";
import { transpileTypeScript } from "./typescript.js";
it("transpiles TypeScript expressions", () => {
    expect(transpileTypeScript("1 + 2")).toMatchSnapshot();
    expect(transpileTypeScript("1, 2")).toMatchSnapshot();
    expect(transpileTypeScript("1, 2 // comment")).toMatchSnapshot();
    expect(transpileTypeScript("(1), (2)")).toMatchSnapshot();
    expect(transpileTypeScript("(1 + 2)")).toMatchSnapshot();
    expect(transpileTypeScript("{x: 42}")).toMatchSnapshot();
    expect(transpileTypeScript("({x: 42})")).toMatchSnapshot();
});
it("transpiles TypeScript function expressions", () => {
    expect(transpileTypeScript("function foo() {}")).toMatchSnapshot();
});
it("transpiles TypeScript class expressions", () => {
    expect(transpileTypeScript("class Foo {}")).toMatchSnapshot();
});
it("transpiles TypeScript statements", () => {
    expect(transpileTypeScript("1 + 2;")).toMatchSnapshot();
    expect(transpileTypeScript("1, 2;")).toMatchSnapshot();
    expect(transpileTypeScript("(1), (2);")).toMatchSnapshot();
    expect(transpileTypeScript("(1 + 2);")).toMatchSnapshot();
    expect(transpileTypeScript("{x: 42};")).toMatchSnapshot();
    expect(transpileTypeScript("({x: 42});")).toMatchSnapshot();
});
it("transpiles TypeScript imports", () => {
    expect(transpileTypeScript('import {foo} from "npm:bar";')).toMatchSnapshot();
    expect(transpileTypeScript('import type {foo} from "npm:bar";')).toMatchSnapshot();
});
it("throws SyntaxError on invalid syntax", () => {
    assert.throws(() => transpileTypeScript("1) + 2"), SyntaxError);
    assert.throws(() => transpileTypeScript("(1 + 2"), SyntaxError);
    assert.throws(() => transpileTypeScript("1 + 2 /* comment"), SyntaxError);
});

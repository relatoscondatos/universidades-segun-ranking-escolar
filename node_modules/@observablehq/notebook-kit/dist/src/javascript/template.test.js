import { expect, it } from "vitest";
import { parseTemplate, transpileTemplate } from "./template.js";
import { toCell } from "../lib/notebook.js";
function md(value) {
    return transpileTemplate(toCell({ id: 1, mode: "md", value }));
}
function html(value) {
    return transpileTemplate(toCell({ id: 1, mode: "html", value }));
}
function node(value) {
    return transpileTemplate(toCell({ id: 1, mode: "node", value }));
}
it("parses a simple template", () => {
    expect(parseTemplate(`Hello, world!`)).toMatchSnapshot();
});
it("parses an empty template", () => {
    expect(parseTemplate(``)).toMatchSnapshot();
});
it("parses a template with an interpolated expression", () => {
    expect(parseTemplate(`Hello, $\{"world"}!`)).toMatchSnapshot();
});
it("parses a template with backquotes", () => {
    expect(parseTemplate(`Hello, \`world\`!`)).toMatchSnapshot();
});
it("parses a template with backslashes", () => {
    expect(parseTemplate(`Hello, \\world\\!`)).toMatchSnapshot();
});
it("transpiles a simple markdown template", () => {
    expect(md(`Hello, world!`)).toMatchSnapshot();
});
it("transpiles an empty markdown template", () => {
    expect(md(``)).toMatchSnapshot();
});
it("transpiles a markdown template with an interpolated expression", () => {
    expect(md(`Hello, $\{"world"}!`)).toMatchSnapshot();
});
it("transpiles a markdown template with backquotes", () => {
    expect(md(`Hello, \`world\`!`)).toMatchSnapshot();
});
it("transpiles a markdown template with backslashes", () => {
    expect(md(`Hello, \\world\\!`)).toMatchSnapshot();
});
it("transpiles a simple html template", () => {
    expect(html(`Hello, world!`)).toMatchSnapshot();
});
it("transpiles an empty html template", () => {
    expect(html(``)).toMatchSnapshot();
});
it("transpiles a html template with an interpolated expression", () => {
    expect(html(`Hello, $\{"world"}!`)).toMatchSnapshot();
});
it("transpiles a html template with backquotes", () => {
    expect(html(`Hello, \`world\`!`)).toMatchSnapshot();
});
it("transpiles a html template with backslashes", () => {
    expect(html(`Hello, \\world\\!`)).toMatchSnapshot();
});
it("transpiles a node template with backslashes", () => {
    expect(node(`Hello, \\world\\!`)).toMatchSnapshot();
});

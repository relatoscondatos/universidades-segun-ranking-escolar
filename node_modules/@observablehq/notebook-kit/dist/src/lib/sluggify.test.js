import { assert, test } from "vitest";
import { sluggify } from "./sluggify.js";
test("returns the default fallback for empty slugs", () => {
    assert.strictEqual(sluggify(""), "untitled");
    assert.strictEqual(sluggify("  "), "untitled");
    assert.strictEqual(sluggify("---"), "untitled");
    assert.strictEqual(sluggify("##)!@#(*"), "untitled");
});
test("returns the given fallback for empty slugs", () => {
    assert.strictEqual(sluggify("", { fallback: "foo" }), "foo");
    assert.strictEqual(sluggify("  ", { fallback: "foo" }), "foo");
    assert.strictEqual(sluggify("---", { fallback: "foo" }), "foo");
    assert.strictEqual(sluggify("##)!@#(*", { fallback: "foo" }), "foo");
});
test("lowercases", () => {
    assert.strictEqual(sluggify("HELLO WORLD"), "hello-world");
    assert.strictEqual(sluggify("HelLo WorlD"), "hello-world");
});
test("removes emoji", () => {
    assert.strictEqual(sluggify("HELLO üòé"), "hello");
    assert.strictEqual(sluggify("HELLO üòé world"), "hello-world");
    assert.strictEqual(sluggify("HELLO üí© world"), "hello-world");
});
test("trims leading and trailing spaces", () => {
    assert.strictEqual(sluggify("  hello world   "), "hello-world");
});
test("collapses contiguous spaces", () => {
    assert.strictEqual(sluggify("  hello    world   "), "hello-world");
});
test("removes punctuation", () => {
    assert.strictEqual(sluggify("Hello, world!"), "hello-world");
    assert.strictEqual(sluggify("Hello, 'world'!"), "hello-world");
    assert.strictEqual(sluggify('Hello, "world"!'), "hello-world");
    assert.strictEqual(sluggify("Hello, ‚Äúworld‚Äù!"), "hello-world");
    assert.strictEqual(sluggify("Hello, ‚Äòworld‚Äô!"), "hello-world");
    assert.strictEqual(sluggify("Hello, fo'c's'le!"), "hello-focsle");
    assert.strictEqual(sluggify("Hello, fo‚Äôc‚Äôs‚Äôle!"), "hello-focsle");
});
test("removes diacritics and combiners", () => {
    assert.strictEqual(sluggify("H√©ll√∂, w√∏rld!"), "hello-w-rld");
    assert.strictEqual(sluggify("zÃ∑ÕõÕÜÕêÃÄÃüÃ¢ÕçÃ°Ã∫aÃ∏ÕíÕùÃ®ÕÖÃªÃ∞Ã™ÕàlÃ∏ÃìÕáÃògÃ∂ÕíÃæÃâÃΩÃëÃÖÕàÃ°oÃ∏ÕÑÕÜÃüÃß"), "zalgo");
});
test("allows up to 50 characters after stripping", () => {
    assert.strictEqual(sluggify("‚ÄòA‚Äòohe pu‚Äòu ki‚Äòeki‚Äòe ke ho ‚ÄòƒÅ‚Äòo ‚Äòia e pi‚Äòi"), "aohe-puu-kiekie-ke-ho-ao-ia-e-pii");
    assert.strictEqual(sluggify("0123456789012345678901234567890123456789012345678"), "0123456789012345678901234567890123456789012345678");
    assert.strictEqual(sluggify("01234567890123456789012345678901234567890123456789"), "01234567890123456789012345678901234567890123456789");
    assert.strictEqual(sluggify("012345678901234567890123456789012345678901234567890"), "01234567890123456789012345678901234567890123456789");
    assert.strictEqual(sluggify("01234567890 1234567890 1234567890 1234567890 12345678"), "01234567890-1234567890-1234567890-1234567890-12345");
    assert.strictEqual(sluggify("01234567890 1234567890 1234567890 1234567890 123456789"), "01234567890-1234567890-1234567890-1234567890-12345");
    assert.strictEqual(sluggify("01234567890 1234567890 1234567890 1234567890 1234567890"), "01234567890-1234567890-1234567890-1234567890-12345");
});

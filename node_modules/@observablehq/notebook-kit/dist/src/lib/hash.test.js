import { assert, describe, test } from "vitest";
import { hash, nameHash } from "./hash.js";
describe("nameHash", () => {
    test("returns a simple name as-is", async () => {
        assert.strictEqual(await nameHash("foo"), "foo");
        assert.strictEqual(await nameHash("foo-bar"), "foo-bar");
        assert.strictEqual(await nameHash("foo-"), "foo-");
        assert.strictEqual(await nameHash("-foo"), "-foo");
    });
    test("sluggifies and hashes names with special characters", async () => {
        assert.strictEqual(await nameHash("foo.db"), "foo-db.2s9flvsm");
        assert.strictEqual(await nameHash("./foo.db"), "foo-db.3ee6cmxd");
        assert.strictEqual(await nameHash("data/foo.db"), "foo-db.61nrbwb0");
        assert.strictEqual(await nameHash("bar/foo.db"), "foo-db.1jlqjad7");
        assert.strictEqual(await nameHash("foo bar"), "foo-bar.69w36b7f");
    });
});
describe("hash", () => {
    test("returns the expected static hash", async () => {
        assert.strictEqual(await hash `foo`, "1n7k0l3ilxvth9al");
        assert.strictEqual(await hash `bar`, "39v7mmkf7sfehxh1");
        assert.strictEqual(await hash ``, "gepym5nmvuej8503");
    });
    test("returns the expected dynamic hash", async () => {
        assert.strictEqual(await hash `SELECT 1 + ${2}`, "64iqby4orqj5tgek");
        assert.strictEqual(await hash `SELECT 1 + ${3}`, "1azi8mazfb39kln7");
    });
});

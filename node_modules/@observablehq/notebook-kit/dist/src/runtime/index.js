import { Runtime } from "@observablehq/runtime";
import { define as _define } from "./define.js";
import { fileAttachments } from "./stdlib/fileAttachment.js";
import { library } from "./stdlib/index.js";
export * from "./display.js";
export * from "./inspect.js";
export * from "./stdlib/index.js";
export { DatabaseClient } from "./stdlib/databaseClient.js";
export { FileAttachment, registerFile } from "./stdlib/fileAttachment.js";
export { Interpreter } from "./stdlib/interpreter.js";
export class NotebookRuntime {
    constructor(builtins = library) {
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "main", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const runtime = new Runtime({ ...builtins, __ojs_runtime: () => runtime });
        this.runtime = Object.assign(runtime, { fileAttachments });
        this.main = runtime.module();
    }
    define(state, definition, observer) {
        _define(this.main, state, definition, observer);
    }
}
const defaultNotebook = new NotebookRuntime();
export const runtime = defaultNotebook.runtime;
export const main = defaultNotebook.main;
export const define = defaultNotebook.define.bind(defaultNotebook);
main.constructor.prototype.defines = function (name) {
    return (this._scope.has(name) ||
        this._builtins.has(name) ||
        this._runtime._builtin._scope.has(name));
};

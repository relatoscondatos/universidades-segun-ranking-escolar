import { DatabaseClient } from "./databaseClient.js";
import * as DOM from "./dom/index.js";
import { FileAttachment } from "./fileAttachment.js";
import * as Generators from "./generators/index.js";
import { Interpreter } from "./interpreter.js";
import { Mutable } from "./mutable.js";
import { Observer } from "./observer.js";
import { require } from "./require.js";
export declare const root: HTMLElement;
export declare const library: {
    aapl: () => Promise<any>;
    alphabet: () => Promise<any>;
    cars: () => Promise<any>;
    citywages: () => Promise<any>;
    diamonds: () => Promise<any>;
    flare: () => Promise<any>;
    industries: () => Promise<any>;
    miserables: () => Promise<any>;
    olympians: () => Promise<any>;
    penguins: () => Promise<any>;
    pizza: () => Promise<any>;
    weather: () => Promise<any>;
    _: () => Promise<any>;
    aq: () => Promise<any>;
    Arrow: () => Promise<any>;
    d3: () => Promise<any>;
    dot: () => Promise<import("./template.js").RawTemplateRenderer>;
    duckdb: () => Promise<any>;
    DuckDBClient: () => Promise<typeof import("./duckdb.js").DuckDBClient>;
    echarts: () => Promise<any>;
    htl: () => Promise<any>;
    html: () => Promise<any>;
    svg: () => Promise<any>;
    Inputs: () => Promise<typeof import("./inputs.js")>;
    L: () => Promise<typeof import("./leaflet.js")>;
    mapboxgl: () => Promise<any>;
    md: () => Promise<import("./template.js").TemplateRenderer>;
    mermaid: () => Promise<import("./template.js").AsyncRawTemplateRenderer>;
    Plot: () => Promise<any>;
    React: () => Promise<any>;
    ReactDOM: () => Promise<any>;
    tex: () => Promise<import("./template.js").RawTemplateRenderer & {
        options: (options?: any) => import("./template.js").RawTemplateRenderer;
        block: import("./template.js").RawTemplateRenderer;
    }>;
    topojson: () => Promise<any>;
    vl: () => Promise<any>;
    now: () => AsyncGenerator<number, void, unknown>;
    width: () => AsyncGenerator<number, void, unknown>;
    DatabaseClient: () => {
        (name: string, options?: import("./databaseClient.js").QueryOptionsSpec): DatabaseClient;
        revive: ({ rows, schema, date, ...meta }: import("../../databases/index.js").SerializableQueryResult) => import("./databaseClient.js").QueryResult;
        prototype: {
            readonly name: string;
            readonly options: import("./databaseClient.js").QueryOptions;
            sql(strings: readonly string[], ...params: import("./databaseClient.js").QueryParam[]): Promise<import("./databaseClient.js").QueryResult>;
            cachePath(strings: readonly string[], ...params: import("./databaseClient.js").QueryParam[]): Promise<string>;
        };
    };
    FileAttachment: () => {
        (name: string, base?: string): FileAttachment;
        prototype: {
            href: string;
            name: string;
            mimeType: string;
            lastModified: number | undefined;
            size: number | undefined;
            url(): Promise<string>;
            blob(): Promise<Blob>;
            arrayBuffer(): Promise<ArrayBuffer>;
            text(encoding?: string): Promise<string>;
            json(): Promise<any>;
            stream(): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;
            dsv({ delimiter, array, typed }?: {
                delimiter?: string | undefined;
                array?: boolean | undefined;
                typed?: boolean | undefined;
            }): Promise<import("./fileAttachment.js").DsvResult>;
            csv(options?: Omit<import("./fileAttachment.js").DsvOptions, "delimiter">): Promise<import("./fileAttachment.js").DsvResult>;
            tsv(options?: Omit<import("./fileAttachment.js").DsvOptions, "delimiter">): Promise<import("./fileAttachment.js").DsvResult>;
            image(props?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
            arrow(): Promise<any>;
            arquero(options?: any): Promise<any>;
            parquet(): Promise<any>;
            xml(mimeType?: DOMParserSupportedType): Promise<Document>;
            html(): Promise<Document>;
        };
    };
    Generators: () => typeof Generators;
    Interpreter: () => {
        (name: string, options?: import("./interpreter.js").InterpreterOptionsSpec): Interpreter;
        prototype: {
            readonly name: string;
            readonly options: import("./interpreter.js").InterpreterOptions;
            run(input: string): Promise<FileAttachment>;
            cachePath(input: string): Promise<string>;
        };
    };
    Mutable: () => typeof Mutable;
    DOM: () => typeof DOM;
    require: () => typeof require;
    __ojs_observer: () => () => Observer;
};

import type { Cell } from "../../lib/notebook.js";
import { FileAttachment } from "./fileAttachment.js";
/** A serializable value that can be interpolated into a query. */
export type InterpreterParam = any;
export interface InterpreterOptionsSpec {
    /** the interpreter format; defaults to "buffer" */
    format?: Cell["format"];
    /** if present, the id of the cell that owns this interpreter */
    id?: number;
    /** if present, results are at least as fresh as the specified date */
    since?: Date | string | number;
}
export interface InterpreterOptions extends InterpreterOptionsSpec {
    since?: Date;
}
export interface Interpreter {
    readonly options: InterpreterOptions;
    run(input: string): Promise<FileAttachment>;
}
export declare const Interpreter: {
    (name: string, options?: InterpreterOptionsSpec): Interpreter;
    prototype: InterpreterImpl;
};
declare class InterpreterImpl implements Interpreter {
    readonly name: string;
    readonly options: InterpreterOptions;
    constructor(name: string, options: InterpreterOptions);
    run(input: string): Promise<FileAttachment>;
    cachePath(input: string): Promise<string>;
}
export {};

export type DsvOptions = {
    delimiter?: string;
    array?: boolean;
    typed?: boolean;
};
export type DsvResult = (Record<string, any>[] | any[][]) & {
    columns: string[];
};
export interface FileAttachment {
    /** The URL of the file. */
    href: string;
    /** The name of the file (not including the path), such as "test.csv". */
    name: string;
    /** The MIME type, such as "text/csv". */
    mimeType: string;
    /** The time this file was most-recently modified, as milliseconds since epoch, if known. */
    lastModified?: number;
    /** The size of this file in bytes, if known. */
    size?: number;
    /** @deprecated use FileAttachment.href instead */
    url(): Promise<string>;
    /** Returns the contents of this file as a Blob. */
    blob(): Promise<Blob>;
    /** Returns the contents of this file as an ArrayBuffer. */
    arrayBuffer(): Promise<ArrayBuffer>;
    /** Returns the contents of this file as a string with the given encoding. */
    text(encoding?: string): Promise<string>;
    /** Returns the contents of this file as JSON. */
    json(): Promise<any>;
    /** Returns a byte stream to the contents of this file. */
    stream(): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;
    /** Returns the contents of this file as delimiter-separated values. */
    dsv(options?: DsvOptions): Promise<DsvResult>;
    /** Returns the contents of this file as comma-separated values. */
    csv(options?: Omit<DsvOptions, "delimiter">): Promise<DsvResult>;
    /** Returns the contents of this file as tab-separated values. */
    tsv(options?: Omit<DsvOptions, "delimiter">): Promise<DsvResult>;
    /** Returns the contents of this file as an image. */
    image(props?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
    /** Returns the contents of this Arrow IPC file as an Apache Arrow table. */
    arrow(): Promise<any>;
    /** Returns the contents of this file as an Arquero table. */
    arquero(options?: any): Promise<any>;
    /** Returns the contents of this Parquet file as an Apache Arrow table. */
    parquet(): Promise<any>;
    /** Returns the contents of this file as an XML document. */
    xml(mimeType?: DOMParserSupportedType): Promise<Document>;
    /** Returns the contents of this file as an HTML document. */
    html(): Promise<Document>;
}
export declare const FileAttachment: {
    (name: string, base?: string): FileAttachment;
    prototype: FileAttachmentImpl;
};
export interface FileInfo {
    path: string;
    mimeType?: string;
    lastModified?: number;
    size?: number;
}
export declare function registerFile(name: string, info: FileInfo, base?: string | URL): FileAttachmentImpl | undefined;
export declare abstract class AbstractFile implements FileAttachment {
    name: string;
    mimeType: string;
    lastModified: number | undefined;
    size: number | undefined;
    abstract href: string;
    constructor(name: string, mimeType?: string, lastModified?: number, size?: number);
    url(): Promise<string>;
    blob(): Promise<Blob>;
    arrayBuffer(): Promise<ArrayBuffer>;
    text(encoding?: string): Promise<string>;
    json(): Promise<any>;
    stream(): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;
    dsv({ delimiter, array, typed }?: {
        delimiter?: string | undefined;
        array?: boolean | undefined;
        typed?: boolean | undefined;
    }): Promise<DsvResult>;
    csv(options?: Omit<DsvOptions, "delimiter">): Promise<DsvResult>;
    tsv(options?: Omit<DsvOptions, "delimiter">): Promise<DsvResult>;
    image(props?: Partial<HTMLImageElement>): Promise<HTMLImageElement>;
    arrow(): Promise<any>;
    arquero(options?: any): Promise<any>;
    parquet(): Promise<any>;
    xml(mimeType?: DOMParserSupportedType): Promise<Document>;
    html(): Promise<Document>;
}
declare class FileAttachmentImpl extends AbstractFile {
    href: string;
    constructor(href: string, name: string, mimeType?: string, lastModified?: number, size?: number);
}
type FileResolver = (name: string) => {
    url: string;
    mimeType?: string;
} | string | null;
export declare function fileAttachments(resolve: FileResolver): (name: string) => FileAttachment;
export {};
